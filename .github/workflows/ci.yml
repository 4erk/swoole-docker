name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [ dev, test, prod ]

    env:
      REGISTRY: 4erk
      IMAGE_NAME: swoole-docker


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Extract version from composer.json
        id: extract_version
        run: |
          VERSION=$(php -r 'echo json_decode(file_get_contents("composer.json"), true)["version"];')
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build --build-arg ENV=${{ matrix.environment }} --build-arg DEBUG=${{ matrix.environment == 'dev' }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }} .

      - name: Tag Docker image with version
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }}-${{ steps.extract_version.outputs.VERSION }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }}-${{ steps.extract_version.outputs.VERSION }}

      - name: Push Docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }}

  publish:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from composer.json
        id: extract_version
        run: |
          VERSION=$(php -r 'echo json_decode(file_get_contents("composer.json"), true)["version"];')
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Pull built images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ steps.extract_version.outputs.VERSION }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ steps.extract_version.outputs.VERSION }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ steps.extract_version.outputs.VERSION }}

      - name: Push dev image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ steps.extract_version.outputs.VERSION }}

      - name: Push test image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ steps.extract_version.outputs.VERSION }}

      - name: Push prod image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ steps.extract_version.outputs.VERSION }}

      - name: Tag and push latest prod image
        if: matrix.environment == 'prod'
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ steps.extract_version.outputs.VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
