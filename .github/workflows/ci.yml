name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

env:
  REGISTRY: docker.io
  IMAGE_NAME: 4erk/swoole-docker

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev, test, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set environment variables
        run: echo "ENV=${{ matrix.environment }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build --build-arg ENV=${{ matrix.environment }} --build-arg DEBUG=${{ matrix.environment == 'dev' }} -t $REGISTRY/$IMAGE_NAME:${{ matrix.environment }} .

      - name: Test Docker image
        run: |
          docker run --rm $REGISTRY/$IMAGE_NAME:${{ matrix.environment }} php -r 'echo "Hello, World!";'

  publish:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull built images
        run: |
          docker pull $REGISTRY/$IMAGE_NAME:dev
          docker pull $REGISTRY/$IMAGE_NAME:test
          docker pull $REGISTRY/$IMAGE_NAME:prod

      - name: Push dev image
        run: docker push $REGISTRY/$IMAGE_NAME:dev

      - name: Push test image
        run: docker push $REGISTRY/$IMAGE_NAME:test

      - name: Push prod image
        run: docker push $REGISTRY/$IMAGE_NAME:prod
